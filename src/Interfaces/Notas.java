
package Interfaces;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import Entidades.Notass;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
/**
 *
 * @author koa
 */
public class Notas extends javax.swing.JFrame {

  DefaultTableModel modelo = new DefaultTableModel();
    ArrayList<Notass> listanotas = new ArrayList<Notass>();
    private final String rutaArchivo = "registro_notas.txt";
    
    public Notas() {
        initComponents();
        this.setTitle("Registro de notas");
        this.setSize(720, 600);
        this.setLocationRelativeTo(null);

         JComboBox<String> comboBoxCurso = new JComboBox<>();
    comboBoxCurso.addItem(" Historia");
    comboBoxCurso.addItem(" Matemática");
    comboBoxCurso.addItem(" Ciencias Naturales");
    comboBoxCurso.addItem(" Comunicación");
    comboBoxCurso.addItem(" Arte");
    comboBoxCurso.addItem(" Educación Fisíca");
    jComboBox1.setModel(comboBoxCurso.getModel()); // Configuración del modelo del JComboBox
    jComboBox1.setSelectedIndex(0); // Selección del primer elemento por defecto

    
        modelo.addColumn("APELLIDOS Y NOMBRES");
        modelo.addColumn("DNI");
        modelo.addColumn("CURSO");
        modelo.addColumn("NOTA");
        cargarDatosDesdeArchivo();
        refrescarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        btnInsertar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBMatricula = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        txtNota = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 24)); // NOI18N
        jLabel1.setText("REGISTRAR NOTAS");

        jLabel2.setText("Apellidos y Nombres:");

        jLabel3.setText("DNI");

        jLabel4.setText("Curso");

        jLabel5.setText("Nota");

        txtDni.setText(" ");
        txtDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDniActionPerformed(evt);
            }
        });
        txtDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDniKeyTyped(evt);
            }
        });

        txtApellidos.setText(" ");
        txtApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidosKeyTyped(evt);
            }
        });

        btnInsertar.setText("INSERTAR");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        TBMatricula.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "APELLIDOS Y NOMBRES", "DNI", "CURSO", "NOTA"
            }
        ));
        TBMatricula.setAutoscrolls(false);
        jScrollPane1.setViewportView(TBMatricula);

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnSalir.setText("SALIR");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        txtNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNotaActionPerformed(evt);
            }
        });
        txtNota.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNotaKeyTyped(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(txtApellidos, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                                    .addComponent(txtDni, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtNota)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnInsertar, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private void cargarDatosDesdeArchivo() {
      try (BufferedReader reader = new BufferedReader(new FileReader(rutaArchivo))) {
        String linea;
        while ((linea = reader.readLine()) != null) {
            if (linea.startsWith("Apellidos y Nombres:")) {
                String apellidosNombres = linea.substring(21).trim();
                String dni = reader.readLine().substring(6).trim();
                String curso = reader.readLine().substring(8).trim();
                String notaLinea = reader.readLine();
                String nota = notaLinea.substring(6).trim(); // Aquí obtenemos el valor de la nota desde la línea leída

                Notass x = new Notass();
                x.setApellidosNombres(apellidosNombres);
                x.setDni(dni);
                x.setCurso(curso);
                x.setNota(nota);
                listanotas.add(x);
            }
        }
    } catch (IOException e) {
        // Manejar el error de lectura del archivo
    }
 }
    public void guardarDatosEnArchivo(Notass nota) {
      
   try (PrintWriter writer = new PrintWriter(new FileWriter(rutaArchivo, true))) {
            writer.println("Apellidos y Nombres: " + nota.getApellidosNombres());
            writer.println("DNI: " + nota.getDni());
            writer.println("Curso: " + nota.getCurso());
            writer.println("Nota: " + nota.getNota());
            writer.println("--------------------------------------------------------------------------");
            JOptionPane.showMessageDialog(this, "Información guardada correctamente.");
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar la información.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void refrescarTabla(){
        
         while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }
        for (Notass notass : listanotas) {
            Object a[] = new Object[4];
            a[0] = notass.getApellidosNombres();
            a[1] = notass.getDni();
            a[2] = notass.getCurso();
            a[3] = notass.getNota();
            modelo.addRow(a);
        }
        TBMatricula.setModel(modelo);
    }
    private void txtDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDniActionPerformed

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        try {
        // Obtener los datos del formulario
        String apellidosNombres = txtApellidos.getText();
        String dni = txtDni.getText();
        String curso = jComboBox1.getSelectedItem().toString();
        String nota = txtNota.getText();

        // Validar que todos los campos estén completos
        if (apellidosNombres.isEmpty() || dni.isEmpty() || nota.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor completa todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si algún campo está vacío
        }

        // Crear una nueva instancia de Notas y agregarla a la lista
        Notass x = new Notass();
        x.setApellidosNombres(apellidosNombres);
        x.setDni(dni);
        x.setCurso(curso);
        x.setNota(nota);
        listanotas.add(x);

        // Actualizar la tabla y guardar los datos en el archivo
        refrescarTabla();
        guardarDatosEnArchivo(x);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al ingresar las notas", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtApellidos.setText("");
        txtDni.setText("");
        jComboBox1.setSelectedIndex(0);
        txtNota.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        Matricula ventanaPrincipal = new Matricula(); // Crear una nueva instancia de la ventana principal
    ventanaPrincipal.setVisible(true); // Mostrar la ventana principal
    dispose(); // Cerrar la ventana actual
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidosKeyTyped
 char c = evt.getKeyChar();
if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ')) {
    evt.consume();
}   
    }//GEN-LAST:event_txtApellidosKeyTyped

    private void txtDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDniKeyTyped
   char c = evt.getKeyChar();
    
    // Solo permitir dígitos o retroceso
    if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE)) {
        evt.consume();
    }
    
    // Limitar la entrada a 8 dígitos
    String textoActual = txtDni.getText();
    if (textoActual.length() >= 8) {
        evt.consume();
    }
    }//GEN-LAST:event_txtDniKeyTyped

    private void txtNotaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNotaKeyTyped
  char c = evt.getKeyChar();

    // Solo permitir dígitos o retroceso
    if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE)) {
        evt.consume();
        return;
    }

    String textoActual = txtNota.getText();
    int longitudTexto = textoActual.length();

    // Solo permitir 3 dígitos
    if (longitudTexto >= 3) {
        evt.consume();
        return;
    }

    String nuevoTexto = textoActual + c;

    // Convertir el nuevo texto a un número entero
    int valor;
    try {
        valor = Integer.parseInt(nuevoTexto);
    } catch (NumberFormatException ex) {
        // Si no se puede convertir a un número, detener la ejecución
        evt.consume();
        return;
    }

    // Permitir solo números dentro del rango de 0 a 20
    if (valor > 20) {
        evt.consume();
    } else if (textoActual.equals("0") && c == '0') {
        // No permitir ingresar "00" como primer dígito
        evt.consume();
    }
    }//GEN-LAST:event_txtNotaKeyTyped

    private void txtNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNotaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TBMatricula;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtNota;
    // End of variables declaration//GEN-END:variables
}
